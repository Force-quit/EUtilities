name: Make a new release on push

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up MSVC environment
    - name: Set up MSVC
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"

    # Step 3: Configure and Build (Debug Configuration)
    - name: Build Debug
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -G "Ninja" ..
        ninja

    # Step 4: Configure and Build (Release Configuration)
    - name: Build Release
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" ..
        ninja

    # Step 5: Prepare release assets
    - name: Prepare release files
      run: |
        mkdir release_artifacts
        # Copy Debug and Release .lib files
        copy build\Debug\EUtilities.lib release_artifacts\EUtilities-Debug.lib
        copy build\Release\EUtilities.lib release_artifacts\EUtilities-Release.lib
        # Copy source files for debugging/completion
        xcopy src release_artifacts\src /E /I

    # Step 6: Create a new version tag
    - name: Get new version tag
      id: tag
      run: |
        echo ::set-output name=next_tag::v1.0.0
        # Alternatively, use a script or fetch previous tags and increment

    # Step 7: Create GitHub Release
    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.next_tag }}
        release_name: Release ${{ steps.tag.outputs.next_tag }}
        body: |
          This release includes:
          - Debug .lib files
          - Release .lib files
          - Source code for code completion and debugging
        draft: false
        prerelease: false
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}

    # Step 8: Upload release assets
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: release_artifacts
        asset_name: release_artifacts.zip
        asset_content_type: application/zip
